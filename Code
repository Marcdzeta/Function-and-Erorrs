// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract GradeQuiz {
    address public teacher;
    mapping(address => uint) public Scores;
    event ScoreAssigned(address indexed student, uint score);
    event Error(string message);

    modifier onlyTeacher() {
        require(msg.sender == teacher, "Only the teacher can perform this action.");
        _;
    }

    modifier validScore(uint score) {
        require(score >= 50 && score <= 100, "Score must be between 50 and 100.");
        _;
    }

    constructor() {
        teacher = msg.sender;
        assert(teacher != address(0)); // This should never fail
    }

    function assignScore(address student, uint score) public onlyTeacher validScore(score) {
        if (Scores[student] != 0) {
            emit Error("Score already assigned to this student.");
            revert("Score already assigned to this student.");
        }

        Scores[student] = score;
        emit ScoreAssigned(student, score);
    }

    function getScore(address student) public view returns (uint) {
        uint score = Scores[student];
        require(score != 0, "No score assigned to this student.");
        return score;
    }
}

